        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:7
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 30332 returned 100% blocks executed 83%
    30332:    8:int compare(const void* a, const void* b) {
    30332:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 30332
    #####:   10:    return 1;
    30332:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 8089 (fallthrough)
branch  1 taken 22243
     8089:   12:    return -1;
    22243:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 4 returned 100% blocks executed 100%
        4:   16:struct gameState* newGame() {
        4:   17:  struct gameState* g = malloc(sizeof(struct gameState));
        4:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 4 returned 100% blocks executed 100%
        4:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:      int k8, int k9, int k10) {
        4:   23:  int* k = malloc(10 * sizeof(int));
        4:   24:  k[0] = k1;
        4:   25:  k[1] = k2;
        4:   26:  k[2] = k3;
        4:   27:  k[3] = k4;
        4:   28:  k[4] = k5;
        4:   29:  k[5] = k6;
        4:   30:  k[6] = k7;
        4:   31:  k[7] = k8;
        4:   32:  k[8] = k9;
        4:   33:  k[9] = k10;
        4:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 2004 returned 100% blocks executed 89%
     2004:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:       struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
     2004:   44:  SelectStream(1);
call    0 returned 2004
     2004:   45:  PutSeed((long)randomSeed);
call    0 returned 2004
        -:   46:
        -:   47:  //check number of players
     2004:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 2004 (fallthrough)
branch  1 taken 0
branch  2 taken 993 (fallthrough)
branch  3 taken 1011
        -:   49:    {
      993:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     1011:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    11121:   57:  for (i = 0; i < 10; i++)
branch  0 taken 10110
branch  1 taken 1011 (fallthrough)
        -:   58:    {
   111210:   59:      for (j = 0; j < 10; j++)
branch  0 taken 101100
branch  1 taken 10110 (fallthrough)
        -:   60:        {
   101100:   61:    if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90990 (fallthrough)
branch  1 taken 10110
branch  2 taken 0 (fallthrough)
branch  3 taken 90990
        -:   62:      {
    #####:   63:        return -1;
        -:   64:      }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     1011:   73:  if (numPlayers == 2)
branch  0 taken 1011 (fallthrough)
branch  1 taken 0
        -:   74:    {
     1011:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     1011:   87:  if (numPlayers == 2)
branch  0 taken 1011 (fallthrough)
branch  1 taken 0
        -:   88:    {
     1011:   89:      state->supplyCount[estate] = 8;
     1011:   90:      state->supplyCount[duchy] = 8;
     1011:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     1011:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1011:  102:  state->supplyCount[silver] = 40;
     1011:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    21231:  106:  for (i = adventurer; i <= treasure_map; i++)        //loop all cards
branch  0 taken 20220
branch  1 taken 1011 (fallthrough)
        -:  107:    {
   166815:  108:      for (j = 0; j < 10; j++)              //loop chosen cards
branch  0 taken 156705
branch  1 taken 10110 (fallthrough)
        -:  109:  {
   156705:  110:    if (kingdomCards[j] == i)
branch  0 taken 10110 (fallthrough)
branch  1 taken 146595
        -:  111:      {
        -:  112:        //check if card is a 'Victory' Kingdom card
    10110:  113:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 10106 (fallthrough)
branch  1 taken 4
branch  2 taken 1011 (fallthrough)
branch  3 taken 9095
        -:  114:    {
     2030:  115:      if (numPlayers == 2){
branch  0 taken 1015 (fallthrough)
branch  1 taken 0
     1015:  116:        state->supplyCount[i] = 8;
        -:  117:      }
    #####:  118:      else{ state->supplyCount[i] = 12; }
        -:  119:    }
        -:  120:        else
        -:  121:    {
     9095:  122:      state->supplyCount[i] = 10;
        -:  123:    }
    10110:  124:        break;
        -:  125:      }
        -:  126:    else    //card is not in the set choosen for the game
        -:  127:      {
   146595:  128:        state->supplyCount[i] = -1;
        -:  129:      }
        -:  130:  }
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     3033:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 2022
branch  1 taken 1011 (fallthrough)
        -:  139:    {
     2022:  140:      state->deckCount[i] = 0;
     8088:  141:      for (j = 0; j < 3; j++)
branch  0 taken 6066
branch  1 taken 2022 (fallthrough)
        -:  142:  {
     6066:  143:    state->deck[i][j] = estate;
     6066:  144:    state->deckCount[i]++;
        -:  145:  }
    16176:  146:      for (j = 3; j < 10; j++)
branch  0 taken 14154
branch  1 taken 2022 (fallthrough)
        -:  147:  {
    14154:  148:    state->deck[i][j] = copper;
    14154:  149:    state->deckCount[i]++;
        -:  150:  }
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     3033:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 2022
branch  1 taken 1011 (fallthrough)
        -:  155:    {
     2022:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 2022
branch  1 taken 0 (fallthrough)
branch  2 taken 2022
        -:  157:  {
    #####:  158:    return -1;
        -:  159:  }
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     3033:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 2022
branch  1 taken 1011 (fallthrough)
        -:  164:    {
        -:  165:      //initialize hand size to zero
     2022:  166:      state->handCount[i] = 0;
     2022:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //  {
        -:  171:      //    drawCard(i, state);
        -:  172:      //  }
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
    28308:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 27297
branch  1 taken 1011 (fallthrough)
        -:  177:    {
    27297:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     1011:  182:  state->outpostPlayed = 0;
     1011:  183:  state->phase = 0;
     1011:  184:  state->numActions = 1;
     1011:  185:  state->numBuys = 1;
     1011:  186:  state->playedCardCount = 0;
     1011:  187:  state->whoseTurn = 0;
     1011:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     6066:  192:  for (it = 0; it < 5; it++){
branch  0 taken 5055
branch  1 taken 1011 (fallthrough)
     5055:  193:    drawCard(state->whoseTurn, state);
call    0 returned 5055
        -:  194:  }
        -:  195:
     1011:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 1011
        -:  197:
     1011:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 3771 returned 100% blocks executed 100%
     3771:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     3771:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     3771:  209:  if (state->deckCount[player] < 1)
branch  0 taken 1747 (fallthrough)
branch  1 taken 2024
     1747:  210:    return -1;
     2024:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 2024
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    24272:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 20224
branch  1 taken 2024 (fallthrough)
    20224:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 20224
    20224:  216:    newDeck[newDeckPos] = state->deck[player][card];
    20224:  217:    newDeckPos++;
    65533:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 45309
branch  1 taken 20224 (fallthrough)
    45309:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    20224:  221:    state->deckCount[player]--;
        -:  222:  }
    22248:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 20224
branch  1 taken 2024 (fallthrough)
    20224:  224:    state->deck[player][i] = newDeck[i];
    20224:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     2024:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0;     //tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 2 returned 100% blocks executed 50%
        2:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        2:  280:  who = state->whoseTurn;
        -:  281:
        2:  282:  if (state->numBuys < 1){
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
        1:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        1:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 3 returned 100% blocks executed 100%
        3:  320:int supplyCount(int card, struct gameState *state) {
        3:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 2 returned 100% blocks executed 82%
        2:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
        2:  326:  int count = 0;
        -:  327:
        2:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 0
branch  1 taken 2 (fallthrough)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
        8:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 6
branch  1 taken 2 (fallthrough)
        -:  334:    {
        6:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 1 (fallthrough)
branch  1 taken 5
        -:  336:    }
        -:  337:
        8:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 6
branch  1 taken 2 (fallthrough)
        -:  339:    {
        6:  340:      if (state->discard[player][i] == card) count++;
branch  0 taken 1 (fallthrough)
branch  1 taken 5
        -:  341:    }
        -:  342:
        2:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 2097 returned 100% blocks executed 100%
     2097:  346:int whoseTurn(struct gameState *state) {
     2097:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 1 returned 100% blocks executed 73%
        1:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
        1:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        1:  401:  j = 0;
       26:  402:  for (i = 0; i < 25; i++)
branch  0 taken 25
branch  1 taken 1 (fallthrough)
        -:  403:    {
       25:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 25
        -:  405:  {
    #####:  406:    j++;
        -:  407:  }
        -:  408:    }
        1:  409:  if ( j >= 3)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
        1:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 4 returned 100% blocks executed 86%
        4:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
        4:  420:  int score = 0;
        -:  421:  //score from hand
       10:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 6
branch  1 taken 4 (fallthrough)
        -:  423:    {
        6:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 1 (fallthrough)
branch  1 taken 5
        6:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 1 (fallthrough)
branch  1 taken 5
        6:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 1 (fallthrough)
branch  1 taken 5
        6:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 1 (fallthrough)
branch  1 taken 5
        6:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 1 (fallthrough)
branch  1 taken 5
        6:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 1 (fallthrough)
branch  1 taken 5
call    2 returned 1
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
       10:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 6
branch  1 taken 4 (fallthrough)
        -:  434:    {
        6:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 1 (fallthrough)
branch  1 taken 5
        6:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 1 (fallthrough)
branch  1 taken 5
        6:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 1 (fallthrough)
branch  1 taken 5
        6:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 1 (fallthrough)
branch  1 taken 5
        6:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 1 (fallthrough)
branch  1 taken 5
        6:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 1 (fallthrough)
branch  1 taken 5
call    2 returned 1
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
       10:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 6
branch  1 taken 4 (fallthrough)
        -:  445:    {
        6:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 6
        6:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 6
        6:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 0 (fallthrough)
branch  1 taken 6
        6:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 0 (fallthrough)
branch  1 taken 6
        6:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 6
        6:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0 (fallthrough)
branch  1 taken 6
call    2 never executed
        -:  452:    }
        -:  453:
        4:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:  {
    #####:  469:    players[i] = -9999;
        -:  470:  }
        -:  471:      else
        -:  472:  {
    #####:  473:    players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:  }
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:  {
    #####:  483:    j = i;
        -:  484:  }
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:  {
    #####:  494:    players[i]++;
        -:  495:  }
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:  {
    #####:  504:    j = i;
        -:  505:  }
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:  {
    #####:  514:    players[i] = 1;
        -:  515:  }
        -:  516:      else
        -:  517:  {
    #####:  518:    players[i] = 0;
        -:  519:  }
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 10043 returned 100% blocks executed 85%
    10043:  525:int drawCard(int player, struct gameState *state)
        -:  526:{ int count;
        -:  527:  int deckCounter;
    10043:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1746 (fallthrough)
branch  1 taken 8297
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     1746:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0
branch  1 taken 1746 (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     1746:  538:    state->deckCount[player] = state->discardCount[player];
     1746:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     1746:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 1746
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
     1746:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     1746:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
     1746:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     1746:  559:    if (deckCounter == 0)
branch  0 taken 1746 (fallthrough)
branch  1 taken 0
     1746:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     8297:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     8297:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     8297:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     8297:  576:    state->deckCount[player]--;
     8297:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     8297:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:
function adventurerEffect called 100 returned 100% blocks executed 44%
      100:  647:int adventurerEffect(struct gameState *state)
        -:  648:{
        -:  649:int drawnCard;
      100:  650:int curPlayer = whoseTurn(state);
call    0 returned 100
      100:  651:int drawnTreasure = 0;
      100:  652:int z = 0;
        -:  653:int temphand[MAX_HAND];
      200:  654:  while(drawnTreasure > 2){
branch  0 taken 0
branch  1 taken 100 (fallthrough)
    #####:  655:    if(state->deckCount[curPlayer] < 1){ //if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  656:    shuffle(curPlayer,state);
call    0 never executed
        -:  657:    }
    #####:  658:    drawCard(curPlayer,state);
call    0 never executed
    #####:  659:    drawnCard = state->hand[curPlayer][state->handCount[curPlayer]-1]; //top card of hand is most recently drawn card.
    #####:  660:    if(drawnCard == copper || drawnCard == silver || drawnCard == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  661:      drawnTreasure++;
        -:  662:    else{
    #####:  663:      temphand[z] = drawnCard;
    #####:  664:      state->handCount[curPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  665:      z++;
        -:  666:    }
        -:  667:  }
      200:  668:  while(z-1>=0){
branch  0 taken 0
branch  1 taken 100 (fallthrough)
    #####:  669:    state->discard[curPlayer][state->discardCount[curPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  670:    z = z - 1;
        -:  671:  }
      100:  672:  return 0;
        -:  673:}
        -:  674:
function smithyEffect called 997 returned 100% blocks executed 100%
      997:  675:int smithyEffect(struct gameState *state, int handPos)
        -:  676:{
      997:  677:  int curPlayer = whoseTurn(state);
call    0 returned 997
        -:  678:  int i;
        -:  679:
        -:  680:  //+3 cards
     4985:  681:  for (i = 0; i < 4; i++)
branch  0 taken 3988
branch  1 taken 997 (fallthrough)
        -:  682:{
     3988:  683:drawCard(curPlayer, state);
call    0 returned 3988
        -:  684:}
        -:  685:
        -:  686:  //discard card from hand
      997:  687:  discardCard(handPos, curPlayer, state, 0);
call    0 returned 997
      997:  688:  return 0;
        -:  689:}
        -:  690:
function villageEffect called 1000 returned 100% blocks executed 100%
     1000:  691:int villageEffect(struct gameState *state, int handPos)
        -:  692:{
     1000:  693:  int curPlayer = whoseTurn(state);
call    0 returned 1000
        -:  694:
        -:  695:  //+1 Card
     1000:  696:  drawCard(curPlayer, state);
call    0 returned 1000
        -:  697:
        -:  698:  //+2 Actions
     1000:  699:  state->numActions = state->numActions + 1;
        -:  700:
        -:  701:  //discard played card from hand
     1000:  702:  discardCard(handPos, curPlayer, state, 0);
call    0 returned 1000
     1000:  703:  return 0;
        -:  704:}
        -:  705:
function embargoEffect called 0 returned 0% blocks executed 0%
    #####:  706:int embargoEffect(struct gameState *state, int handPos, int choice1)
        -:  707:{
    #####:  708:  int curPlayer = whoseTurn(state);
call    0 never executed
        -:  709:
        -:  710:  //+2 Coins
    #####:  711:  state->coins = state->coins + 2;
        -:  712:
        -:  713:  //see if selected pile is in play
    #####:  714:  if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  715:  {
    #####:  716:    return 0;
        -:  717:  }
        -:  718:
        -:  719:  //add embargo token to selected supply pile
    #####:  720:  state->embargoTokens[choice1]++;
        -:  721:
        -:  722:  //trash card
    #####:  723:  discardCard(handPos, curPlayer, state, 1);
call    0 never executed
    #####:  724:  return 0;
        -:  725:}
        -:  726:
function sea_hagEffect called 0 returned 0% blocks executed 0%
    #####:  727:int sea_hagEffect(struct gameState *state)
        -:  728:{
        -:  729:
    #####:  730:  int curPlayer = whoseTurn(state);
call    0 never executed
        -:  731:  int i;
        -:  732:
    #####:  733:  for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####:  734:    if (i != curPlayer){
branch  0 never executed
branch  1 never executed
    #####:  735:      state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];          state->deckCount[i]--;
    #####:  736:      state->discardCount[i]++;
    #####:  737:      state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  738:    }
        -:  739:  }
    #####:  740:  return 0;
        -:  741:}
        -:  742:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  743:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  744:{
        -:  745:  int i;
        -:  746:  int j;
        -:  747:  int k;
        -:  748:  int x;
        -:  749:  int index;
    #####:  750:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  751:  int nextPlayer = currentPlayer + 1;
        -:  752:
    #####:  753:  int tributeRevealedCards[2] = {-1, -1};
        -:  754:  int temphand[MAX_HAND];// moved above the if statement
    #####:  755:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  756:    nextPlayer = 0;
        -:  757:  }
        -:  758:
        -:  759:
        -:  760:  //uses switch to select card and perform actions
    #####:  761:  switch( card )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  762:    {
        -:  763:    case adventurer:
        -:  764:
    #####:  765:      return adventurerEffect(state);
call    0 never executed
        -:  766:
        -:  767:    case council_room:
        -:  768:      //+4 Cards
    #####:  769:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  770:  {
    #####:  771:    drawCard(currentPlayer, state);
call    0 never executed
        -:  772:  }
        -:  773:
        -:  774:      //+1 Buy
    #####:  775:      state->numBuys++;
        -:  776:
        -:  777:      //Each other player draws a card
    #####:  778:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  779:  {
    #####:  780:    if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  781:      {
    #####:  782:        drawCard(i, state);
call    0 never executed
        -:  783:      }
        -:  784:  }
        -:  785:
        -:  786:      //put played card in played card pile
    #####:  787:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  788:
    #####:  789:      return 0;
        -:  790:
        -:  791:    case feast:
        -:  792:      //gain card with cost up to 5
        -:  793:      //Backup hand
    #####:  794:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  795:  temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  796:  state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  797:      }
        -:  798:      //Backup hand
        -:  799:
        -:  800:      //Update Coins for Buy
    #####:  801:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  802:      x = 1;//Condition to loop on
    #####:  803:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  804:  if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  805:    if (DEBUG)
        -:  806:      printf("None of that card left, sorry!\n");
        -:  807:
        -:  808:    if (DEBUG){
        -:  809:      printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  810:    }
        -:  811:  }
    #####:  812:  else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  813:    printf("That card is too expensive!\n");
call    0 never executed
        -:  814:
        -:  815:    if (DEBUG){
        -:  816:      printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  817:    }
        -:  818:  }
        -:  819:  else{
        -:  820:
        -:  821:    if (DEBUG){
        -:  822:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  823:    }
        -:  824:
    #####:  825:    gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  826:    x = 0;//No more buying cards
        -:  827:
        -:  828:    if (DEBUG){
        -:  829:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  830:    }
        -:  831:
        -:  832:  }
        -:  833:      }
        -:  834:
        -:  835:      //Reset Hand
    #####:  836:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  837:  state->hand[currentPlayer][i] = temphand[i];
    #####:  838:  temphand[i] = -1;
        -:  839:      }
        -:  840:      //Reset Hand
        -:  841:
    #####:  842:      return 0;
        -:  843:
        -:  844:    case gardens:
    #####:  845:      return -1;
        -:  846:
        -:  847:    case mine:
    #####:  848:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  849:
    #####:  850:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  851:  {
    #####:  852:    return -1;
        -:  853:  }
        -:  854:
    #####:  855:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  856:  {
    #####:  857:    return -1;
        -:  858:  }
        -:  859:
    #####:  860:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  861:  {
    #####:  862:    return -1;
        -:  863:  }
        -:  864:
    #####:  865:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  866:
        -:  867:      //discard card from hand
    #####:  868:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  869:
        -:  870:      //discard trashed card
    #####:  871:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  872:  {
    #####:  873:    if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  874:      {
    #####:  875:        discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  876:        break;
        -:  877:      }
        -:  878:  }
        -:  879:
    #####:  880:      return 0;
        -:  881:
        -:  882:    case remodel:
    #####:  883:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  884:
    #####:  885:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  886:  {
    #####:  887:    return -1;
        -:  888:  }
        -:  889:
    #####:  890:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  891:
        -:  892:      //discard card from hand
    #####:  893:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  894:
        -:  895:      //discard trashed card
    #####:  896:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  897:  {
    #####:  898:    if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  899:      {
    #####:  900:        discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  901:        break;
        -:  902:      }
        -:  903:  }
        -:  904:
        -:  905:
    #####:  906:      return 0;
        -:  907:
        -:  908:    case smithy:
        -:  909:      //+3 Cards
    #####:  910:      return smithyEffect(state, handPos);
call    0 never executed
        -:  911:
        -:  912:    case village:
        -:  913:
    #####:  914:      return villageEffect(state, handPos);
call    0 never executed
        -:  915:
        -:  916:    case baron:
    #####:  917:      state->numBuys++;//Increase buys by 1!
    #####:  918:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  919:  int p = 0;//Iterator for hand!
    #####:  920:  int card_not_discarded = 1;//Flag for discard set!
    #####:  921:  while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  922:    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  923:      state->coins += 4;//Add 4 coins to the amount of coins
    #####:  924:      state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  925:      state->discardCount[currentPlayer]++;
    #####:  926:      for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  927:        state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  928:      }
    #####:  929:      state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  930:      state->handCount[currentPlayer]--;
    #####:  931:      card_not_discarded = 0;//Exit the loop
        -:  932:    }
    #####:  933:    else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  934:      if(DEBUG) {
        -:  935:        printf("No estate cards in your hand, invalid choice\n");
        -:  936:        printf("Must gain an estate if there are any\n");
        -:  937:      }
    #####:  938:      if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  939:        gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  940:        state->supplyCount[estate]--;//Decrement estates
    #####:  941:        if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  942:    isGameOver(state);
call    0 never executed
        -:  943:        }
        -:  944:      }
    #####:  945:      card_not_discarded = 0;//Exit the loop
        -:  946:    }
        -:  947:
        -:  948:    else{
    #####:  949:      p++;//Next card
        -:  950:    }
        -:  951:  }
        -:  952:      }
        -:  953:
        -:  954:      else{
    #####:  955:  if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  956:    gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  957:    state->supplyCount[estate]--;//Decrement Estates
    #####:  958:    if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  959:      isGameOver(state);
call    0 never executed
        -:  960:    }
        -:  961:  }
        -:  962:      }
        -:  963:
        -:  964:
    #####:  965:      return 0;
        -:  966:
        -:  967:    case great_hall:
        -:  968:      //+1 Card
    #####:  969:      drawCard(currentPlayer, state);
call    0 never executed
        -:  970:
        -:  971:      //+1 Actions
    #####:  972:      state->numActions++;
        -:  973:
        -:  974:      //discard card from hand
    #####:  975:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  976:      return 0;
        -:  977:
        -:  978:    case minion:
        -:  979:      //+1 action
    #####:  980:      state->numActions++;
        -:  981:
        -:  982:      //discard card from hand
    #####:  983:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  984:
    #####:  985:      if (choice1)    //+2 coins
branch  0 never executed
branch  1 never executed
        -:  986:  {
    #####:  987:    state->coins = state->coins + 2;
        -:  988:  }
        -:  989:
    #####:  990:      else if (choice2)   //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  991:  {
        -:  992:    //discard hand
    #####:  993:    while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  994:      {
    #####:  995:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  996:      }
        -:  997:
        -:  998:    //draw 4
    #####:  999:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1000:      {
    #####: 1001:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1002:      }
        -: 1003:
        -: 1004:    //other players discard hand and redraw if hand size > 4
    #####: 1005:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1006:      {
    #####: 1007:        if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1008:    {
    #####: 1009:      if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1010:        {
        -: 1011:          //discard hand
    #####: 1012:          while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1013:      {
    #####: 1014:        discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1015:      }
        -: 1016:
        -: 1017:          //draw 4
    #####: 1018:          for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1019:      {
    #####: 1020:        drawCard(i, state);
call    0 never executed
        -: 1021:      }
        -: 1022:        }
        -: 1023:    }
        -: 1024:      }
        -: 1025:
        -: 1026:  }
    #####: 1027:      return 0;
        -: 1028:
        -: 1029:    case steward:
        -: 1030:
    #####: 1031:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1032:      {
        -: 1033:        //+2 cards
    #####: 1034:        drawCard(currentPlayer, state);
call    0 never executed
    #####: 1035:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1036:      }
    #####: 1037:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1038:      {
        -: 1039:        //+2 coins
    #####: 1040:        state->coins = state->coins + 2;
        -: 1041:      }
        -: 1042:      else
        -: 1043:      {
        -: 1044:        //trash 2 cards in hand
    #####: 1045:        discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1046:        discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1047:      }
        -: 1048:
        -: 1049:      //discard card from hand
    #####: 1050:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1051:      return 0;
        -: 1052:
        -: 1053:    case tribute:
    #####: 1054:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1055:  if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1056:    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1057:    state->deckCount[nextPlayer]--;
        -: 1058:  }
    #####: 1059:  else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1060:    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1061:    state->discardCount[nextPlayer]--;
        -: 1062:  }
        -: 1063:  else{
        -: 1064:    //No Card to Reveal
        -: 1065:    if (DEBUG){
        -: 1066:      printf("No cards to reveal\n");
        -: 1067:    }
        -: 1068:  }
        -: 1069:      }
        -: 1070:
        -: 1071:      else{
    #####: 1072:  if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1073:    for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1074:      state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1075:      state->deckCount[nextPlayer]++;
    #####: 1076:      state->discard[nextPlayer][i] = -1;
    #####: 1077:      state->discardCount[nextPlayer]--;
        -: 1078:    }
        -: 1079:
    #####: 1080:    shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1081:  }
    #####: 1082:  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1083:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1084:  state->deckCount[nextPlayer]--;
    #####: 1085:  tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1086:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1087:  state->deckCount[nextPlayer]--;
        -: 1088:      }
        -: 1089:
    #####: 1090:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1091:  state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1092:  state->playedCardCount++;
    #####: 1093:  tributeRevealedCards[1] = -1;
        -: 1094:      }
        -: 1095:
    #####: 1096:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1097:  if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1098:    state->coins += 2;
        -: 1099:  }
        -: 1100:
    #####: 1101:  else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1102:    drawCard(currentPlayer, state);
call    0 never executed
    #####: 1103:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1104:  }
        -: 1105:  else{//Action Card
    #####: 1106:    state->numActions = state->numActions + 2;
        -: 1107:  }
        -: 1108:      }
        -: 1109:
    #####: 1110:      return 0;
        -: 1111:
        -: 1112:    case ambassador:
    #####: 1113:      j = 0;    //used to check if player has enough cards to discard
        -: 1114:
    #####: 1115:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1116:  {
    #####: 1117:    return -1;
        -: 1118:  }
        -: 1119:
    #####: 1120:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1121:  {
    #####: 1122:    return -1;
        -: 1123:  }
        -: 1124:
    #####: 1125:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1126:  {
    #####: 1127:    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1128:      {
    #####: 1129:        j++;
        -: 1130:      }
        -: 1131:  }
    #####: 1132:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1133:  {
    #####: 1134:    return -1;
        -: 1135:  }
        -: 1136:
        -: 1137:      if (DEBUG)
        -: 1138:  printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1139:
        -: 1140:      //increase supply count for choosen card by amount being discarded
    #####: 1141:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1142:
        -: 1143:      //each other player gains a copy of revealed card
    #####: 1144:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1145:  {
    #####: 1146:    if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1147:      {
    #####: 1148:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1149:      }
        -: 1150:  }
        -: 1151:
        -: 1152:      //discard played card from hand
    #####: 1153:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1154:
        -: 1155:      //trash copies of cards returned to supply
    #####: 1156:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1157:  {
    #####: 1158:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1159:      {
    #####: 1160:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1161:    {
    #####: 1162:      discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1163:      break;
        -: 1164:    }
        -: 1165:      }
        -: 1166:  }
        -: 1167:
    #####: 1168:      return 0;
        -: 1169:
        -: 1170:    case cutpurse:
        -: 1171:
    #####: 1172:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1173:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1174:  {
    #####: 1175:    if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1176:      {
    #####: 1177:        for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1178:    {
    #####: 1179:      if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1180:        {
    #####: 1181:          discardCard(j, i, state, 0);
call    0 never executed
    #####: 1182:          break;
        -: 1183:        }
    #####: 1184:      if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1185:        {
    #####: 1186:          for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1187:      {
        -: 1188:        if (DEBUG)
        -: 1189:          printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1190:      }
    #####: 1191:          break;
        -: 1192:        }
        -: 1193:    }
        -: 1194:
        -: 1195:      }
        -: 1196:
        -: 1197:  }
        -: 1198:
        -: 1199:      //discard played card from hand
    #####: 1200:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1201:
    #####: 1202:      return 0;
        -: 1203:
        -: 1204:
        -: 1205:    case embargo:
        -: 1206:
    #####: 1207:      return embargoEffect(state, handPos, choice1);
call    0 never executed
        -: 1208:
        -: 1209:    case outpost:
        -: 1210:      //set outpost flag
    #####: 1211:      state->outpostPlayed++;
        -: 1212:
        -: 1213:      //discard card
    #####: 1214:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1215:      return 0;
        -: 1216:
        -: 1217:    case salvager:
        -: 1218:      //+1 buy
    #####: 1219:      state->numBuys++;
        -: 1220:
    #####: 1221:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1222:  {
        -: 1223:    //gain coins equal to trashed card
    #####: 1224:    state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1225:    //trash card
    #####: 1226:    discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1227:  }
        -: 1228:
        -: 1229:      //discard card
    #####: 1230:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1231:      return 0;
        -: 1232:
        -: 1233:    case sea_hag:
        -: 1234:
    #####: 1235:      return sea_hagEffect(state);
call    0 never executed
        -: 1236:
        -: 1237:    case treasure_map:
        -: 1238:      //search hand for another treasure_map
    #####: 1239:      index = -1;
    #####: 1240:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:  {
    #####: 1242:    if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1243:      {
    #####: 1244:        index = i;
    #####: 1245:        break;
        -: 1246:      }
        -: 1247:  }
    #####: 1248:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1249:  {
        -: 1250:    //trash both treasure cards
    #####: 1251:    discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1252:    discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1253:
        -: 1254:    //gain 4 Gold cards
    #####: 1255:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1256:      {
    #####: 1257:        gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1258:      }
        -: 1259:
        -: 1260:    //return success
    #####: 1261:    return 1;
        -: 1262:  }
        -: 1263:
        -: 1264:      //no second treasure_map found in hand
    #####: 1265:      return -1;
        -: 1266:    }
        -: 1267:
    #####: 1268:  return -1;
        -: 1269:}
        -: 1270:
function discardCard called 1997 returned 100% blocks executed 89%
     1997: 1271:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1272:{
        -: 1273:
        -: 1274:  //if card is not trashed, added to Played pile
     1997: 1275:  if (trashFlag < 1)
branch  0 taken 1997 (fallthrough)
branch  1 taken 0
        -: 1276:    {
        -: 1277:      //add card to played pile
     1997: 1278:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
     1997: 1279:      state->playedCardCount++;
        -: 1280:    }
        -: 1281:
        -: 1282:  //set played card to -1
     1997: 1283:  state->hand[currentPlayer][handPos] = -1;
        -: 1284:
        -: 1285:  //remove card from player's hand
     1997: 1286:  if ( handPos == (state->handCount[currentPlayer] - 1) )   //last card in hand array is played
branch  0 taken 6 (fallthrough)
branch  1 taken 1991
        -: 1287:    {
        -: 1288:      //reduce number of cards in hand
        6: 1289:      state->handCount[currentPlayer]--;
        -: 1290:    }
     1991: 1291:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 1991
        -: 1292:    {
        -: 1293:      //reduce number of cards in hand
    #####: 1294:      state->handCount[currentPlayer]--;
        -: 1295:    }
        -: 1296:  else
        -: 1297:    {
        -: 1298:      //replace discarded card with last card in hand
     1991: 1299:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1300:      //set last card to -1
     1991: 1301:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1302:      //reduce number of cards in hand
     1991: 1303:      state->handCount[currentPlayer]--;
        -: 1304:    }
        -: 1305:
     1997: 1306:  return 0;
        -: 1307:}
        -: 1308:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1309:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1310:{
        -: 1311:  //Note: supplyPos is enum of choosen card
        -: 1312:
        -: 1313:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1314:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1315:    {
    #####: 1316:      return -1;
        -: 1317:    }
        -: 1318:
        -: 1319:  //added card for [whoseTurn] current player:
        -: 1320:  // toFlag = 0 : add to discard
        -: 1321:  // toFlag = 1 : add to deck
        -: 1322:  // toFlag = 2 : add to hand
        -: 1323:
    #####: 1324:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1325:    {
    #####: 1326:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1327:      state->deckCount[player]++;
        -: 1328:    }
    #####: 1329:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1330:    {
    #####: 1331:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1332:      state->handCount[player]++;
        -: 1333:    }
        -: 1334:  else
        -: 1335:    {
    #####: 1336:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1337:      state->discardCount[player]++;
        -: 1338:    }
        -: 1339:
        -: 1340:  //decrease number in supply pile
    #####: 1341:  state->supplyCount[supplyPos]--;
        -: 1342:
    #####: 1343:  return 0;
        -: 1344:}
        -: 1345:
function updateCoins called 1011 returned 100% blocks executed 82%
     1011: 1346:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1347:{
        -: 1348:  int i;
        -: 1349:
        -: 1350:  //reset coin count
     1011: 1351:  state->coins = 0;
        -: 1352:
        -: 1353:  //add coins for each Treasure card in player's hand
     6066: 1354:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 5055
branch  1 taken 1011 (fallthrough)
        -: 1355:    {
     5055: 1356:      if (state->hand[player][i] == copper)
branch  0 taken 3551 (fallthrough)
branch  1 taken 1504
        -: 1357:  {
     3551: 1358:    state->coins += 1;
        -: 1359:  }
     1504: 1360:      else if (state->hand[player][i] == silver)
branch  0 taken 0 (fallthrough)
branch  1 taken 1504
        -: 1361:  {
    #####: 1362:    state->coins += 2;
        -: 1363:  }
     1504: 1364:      else if (state->hand[player][i] == gold)
branch  0 taken 0 (fallthrough)
branch  1 taken 1504
        -: 1365:  {
    #####: 1366:    state->coins += 3;
        -: 1367:  }
        -: 1368:    }
        -: 1369:
        -: 1370:  //add bonus
     1011: 1371:  state->coins += bonus;
        -: 1372:
     1011: 1373:  return 0;
        -: 1374:}
        -: 1375:
        -: 1376:
        -: 1377://end of dominion.c
