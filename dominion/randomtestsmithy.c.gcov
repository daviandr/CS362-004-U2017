        -:    0:Source:randomtestsmithy.c
        -:    0:Graph:randomtestsmithy.gcno
        -:    0:Data:randomtestsmithy.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:
        -:    3: */
        -:    4:
        -:    5:#include <stdio.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <assert.h>
        -:    8:#include <math.h>
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:
        -:   12:#define TEST_MAX 1000
        -:   13:
      993:   14:int checkSmithyCard(int cp, struct gameState *g, int oldHand, int oldDeck){
        -:   15:	int sizeDiff;
        -:   16:
        -:   17:/* For Debugging
        -:   18:	printf("state handsize: %d\n", g->handCount[cp]);
        -:   19:	printf("state decksize: %d\n", g->deckCount[cp]);
        -:   20:	printf("state discardsize: %d\n", g->discardCount[cp]);
        -:   21:
        -:   22:	printf("old handsize: %d\n", oldHand);
        -:   23:	printf("old decksize: %d\n", oldDeck);
        -:   24:	printf("old discard: %d\n", oldDiscard);
        -:   25:*/
        -:   26:
      993:   27:	printf("\n-----Entering Test-----\n");
        -:   28:	//First, new handsize(handsize in struct g) should be 2 > than oldHand.
      993:   29:	sizeDiff = g->handCount[cp] - oldHand;
      993:   30:	printf("After Smithy Card Hand Count: %d\n", g->handCount[cp]);
      993:   31:	printf("Old Hand Count: %d\n", oldHand);
      993:   32:	printf("Size Difference: %d\n\n", sizeDiff);
      993:   33:	assert(sizeDiff == 2);
        -:   34:	//Second, After Smithy Card decksize(decksize in struct g) should be 3 < than oldDeck.
      993:   35:	sizeDiff = oldDeck - g->deckCount[cp];
      993:   36:	printf("After Smithy Card Deck Count: %d\n", g->deckCount[cp]);
      993:   37:	printf("Old Deck Count: %d\n", oldDeck);
      993:   38:	printf("Size Difference: %d\n\n", sizeDiff);
      993:   39:	assert(sizeDiff == 3);
        -:   40:
        -:   41:
        -:   42:/*
        -:   43:	printf("\n-----Checking size of hand-----\n");
        -:   44:	printf("Size of hand before smithy() call: %d\n", oldHand);
        -:   45:	printf("Size of hand after smithy() call: %d\n", g->handCount[cp]);
        -:   46:	if(g->handCount[cp] <= oldHand)
        -:   47:	{
        -:   48:		printf("Error: Before should be < after\n");
        -:   49:		assert(g->handCount[cp] <= oldHand);
        -:   50:	}
        -:   51:
        -:   52:	printf("\n-----Checking size of deck-----\n");
        -:   53:	printf("Size of deck before smithy() call: %d\n", oldDeck);
        -:   54:	printf("Size of deck after smithy() call: %d\n", g->deckCount[cp]);
        -:   55:	sizeDiff = g->deckCount[cp] - oldDeck;
        -:   56:	if(sizeDiff > 3 || sizeDiff < 3)
        -:   57:	{
        -:   58:		printf("Error: size of deck before should be 3 less than size of deck after\n");
        -:   59:		assert(sizeDiff > 3 || sizeDiff < 3);
        -:   60:	}
        -:   61:*/
      993:   62:}
        -:   63:
      993:   64:int playSmithyCard(int currentPlayer, int handPos, struct gameState *state){
        -:   65:	int i;
        -:   66:
        -:   67:    //+3 Cards
     3972:   68:    for (i = 0; i < 3; i++)
        -:   69:	{
     2979:   70:	  drawCard(currentPlayer, state);
        -:   71:	}
        -:   72:			
        -:   73:    //discard card from hand
      993:   74:    discardCard(handPos, currentPlayer, state, 0);
        -:   75:
      993:   76:    return 0;
        -:   77:}
        -:   78:
        1:   79:int main(){
        -:   80:	int i;
        -:   81:	int bonus;
        -:   82:	int handPos;
        -:   83:	int gameSeed;
        -:   84:	int numPlayers;
        -:   85:	int currentPlayer;
        -:   86:	int handCountCheck;
        -:   87:	int deckCountCheck;
        -:   88:	int discardCountCheck;
        1:   89:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        -:   90:
        -:   91:	struct gameState g;
        -:   92:
        1:   93:	srand(time(NULL));
        -:   94:
     1001:   95:	for(i = 0; i < TEST_MAX; i++)
        -:   96:	{	
     1000:   97:		printf("\n-*-*-*-*-TEST NUMBER (%d)-*-*-*-*-\n", i + 1);
        -:   98:
     1000:   99:		gameSeed = rand();		//generate a random see to initialize new game
        -:  100:		//printf("\nRandom Seed: %d\	n", gameSeed);
     1000:  101:		numPlayers = (rand() % (3 - 1) + 1);	//pick random number of players, between 0 - MAX_PLAYERS
     1000:  102:		bonus = 0;		//for cardEffect() function
     1000:  103:		handPos = rand() % 4; 	//generte random handPos in standard sized hand
     1000:  104:		currentPlayer = (rand() % (3 - 1) + 1);	//pick a random player, based on the number of players from above
        -:  105:
        -:  106:/*For Debugging
        -:  107:		printf("Gameseed: %d\n", gameSeed);
        -:  108:		printf("Number Players: %d\n", numPlayers);
        -:  109:		printf("Hand Position: %d\n", handPos);
        -:  110:		printf("Current Player: %d\n", currentPlayer);
        -:  111:*/
        -:  112:
     1000:  113:		initializeGame(numPlayers, k, gameSeed, &g);
        -:  114:
     1000:  115:		g.handCount[currentPlayer] = rand() % MAX_HAND;
     1000:  116:		g.deckCount[currentPlayer] = rand() % MAX_DECK;
        -:  117:
     1000:  118:		handCountCheck = g.handCount[currentPlayer];
     1000:  119:		deckCountCheck = g.deckCount[currentPlayer];
        -:  120:
     1000:  121:		printf("\n----Parameters for Test----\n");
     1000:  122:		printf("Number of Players: %d\n", numPlayers);
     1000:  123:		printf("Hand Position: %d\n", handPos);
     1000:  124:		printf("Current Player; %d\n", currentPlayer);
     1000:  125:		printf("Hand Count: %d\n", handCountCheck);
     1000:  126:		printf("Deck Count: %d\n", deckCountCheck);
        -:  127:
        -:  128:/*For Debugging
        -:  129:		printf("old handcount: %d\n", handCountCheck);
        -:  130:		printf("old deckcount: %d\n", deckCountCheck);
        -:  131:*/
     1000:  132:		if(deckCountCheck < 3)
        -:  133:		{
        7:  134:			printf("\nNot enough cards to draw\n");
        7:  135:			shuffle(currentPlayer, &g);
        -:  136:		}
        -:  137:		else
        -:  138:		{
      993:  139:			playSmithyCard(currentPlayer, handPos, &g);
        -:  140:			//cardEffect(smithy, 1, 1, 1, &g, handPos, &bonus);
      993:  141:			checkSmithyCard(currentPlayer, &g, handCountCheck, deckCountCheck);
        -:  142:		}
        -:  143:	}
        -:  144:
        1:  145:	return 0;
        -:  146:}
